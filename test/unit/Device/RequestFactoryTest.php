<?php

declare(strict_types=1);

namespace BitWasp\Test\Trezor\Device;

use BitWasp\Test\Trezor\TestCase;
use BitWasp\Trezor\Device\RequestFactory;
use BitWasp\TrezorProto\ClearSession;
use BitWasp\TrezorProto\GetEntropy;
use BitWasp\TrezorProto\Initialize;
use BitWasp\TrezorProto\InputScriptType;

class RequestFactoryTest extends TestCase
{
    /**
     * @var RequestFactory
     */
    private $factory;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->factory = new RequestFactory();
    }

    public function testClearSession()
    {
        $clearsession = $this->factory->clearSession();
        $this->assertInstanceOf(ClearSession::class, $clearsession);
    }
    public function testInitialize()
    {
        $initialize = $this->factory->initialize();
        $this->assertInstanceOf(Initialize::class, $initialize);
    }
    public function testGetEntropy()
    {
        $getentropy = $this->factory->getEntropy(32);
        $this->assertInstanceOf(GetEntropy::class, $getentropy);
        $this->assertEquals(32, $getentropy->getSize());

        $getentropy = $this->factory->getEntropy(8);
        $this->assertEquals(8, $getentropy->getSize());

        $getentropy = $this->factory->getEntropy(16);
        $this->assertEquals(16, $getentropy->getSize());
    }

    public function getAddressFixtures()
    {
        return [
            ["Bitcoin", [44 | 0x80000000, 0 | 0x80000000, 0 | 0x80000000, 0, 0], InputScriptType::SPENDADDRESS(), false, false],
            ["Bitcoin", [49 | 0x80000000, 0 | 0x80000000, 0 | 0x80000000, 0, 0], InputScriptType::SPENDP2SHWITNESS(), false, true],
            ["Bitcoin", [84 | 0x80000000, 0 | 0x80000000, 0 | 0x80000000, 0, 0], InputScriptType::SPENDWITNESS(), false, false],
            ["Litecoin", [44 | 0x80000000, 0 | 0x80000000, 0 | 0x80000000, 0, 0], InputScriptType::SPENDADDRESS(), false, true],
        ];
    }

    /**
     * @dataProvider getAddressFixtures
     * @param string $coinName
     * @param array $path
     * @param InputScriptType $inScript
     * @param bool $display
     */
    public function testGetAddress(string $coinName, array $path, InputScriptType $inScript, bool $multisig, bool $display)
    {
        $getAddress = $this->factory->getAddress($coinName, $path, $inScript, $display);
        $this->assertEquals($coinName, $getAddress->getCoinName());
        $this->assertEquals($path, $getAddress->getAddressNList()->getArrayCopy());
        $this->assertEquals($inScript->value(), $getAddress->getScriptType()->value());
        $this->assertEquals($display, $getAddress->getShowDisplay());
    }

    /**
     * @dataProvider getAddressFixtures
     * @param string $coinName
     * @param array $path
     * @param InputScriptType $inScript
     * @param bool $display
     */
    public function testGetKeyHashAddress(string $coinName, array $path, InputScriptType $inScript, bool $multisig, bool $display)
    {
        $getAddress = $this->factory->getKeyHashAddress($coinName, $path, $display);
        $this->assertEquals($coinName, $getAddress->getCoinName());
        $this->assertEquals($path, $getAddress->getAddressNList()->getArrayCopy());
        $this->assertEquals($display, $getAddress->getShowDisplay());
    }

    /**
     * @dataProvider getAddressFixtures
     * @param string $coinName
     * @param array $path
     * @param InputScriptType $inScript
     * @param bool $display
     */
    public function testGetWitnessKeyHashAddress(string $coinName, array $path, InputScriptType $inScript, bool $multisig, bool $display)
    {
        $getAddress = $this->factory->getWitnessKeyHashAddress($coinName, $path, $display);
        $this->assertEquals($coinName, $getAddress->getCoinName());
        $this->assertEquals($path, $getAddress->getAddressNList()->getArrayCopy());
        $this->assertEquals($display, $getAddress->getShowDisplay());
    }

    /**
     * @dataProvider getAddressFixtures
     * @param string $coinName
     * @param array $path
     * @param InputScriptType $inScript
     * @param bool $display
     */
    public function testGetP2shWitnessKeyHashAddress(string $coinName, array $path, InputScriptType $inScript, bool $multisig, bool $display)
    {
        $getAddress = $this->factory->getP2shWitnessKeyHashAddress($coinName, $path, $display);
        $this->assertEquals($coinName, $getAddress->getCoinName());
        $this->assertEquals($path, $getAddress->getAddressNList()->getArrayCopy());
        $this->assertEquals($display, $getAddress->getShowDisplay());
    }

    public function getPubkeyFixtures(): array
    {
        return [
            ["Bitcoin", [44 | 0x80000000, 0 | 0x80000000, 0 | 0x80000000, 0, 0], null],
            ["Bitcoin", [84 | 0x80000000, 0 | 0x80000000, 0 | 0x80000000, 0, 0], "secp256k1"],
            ["Bitcoin", [84 | 0x80000000, 0 | 0x80000000, 0 | 0x80000000, 0, 0], "nistp256"],
        ];
    }

    /**
     * @dataProvider getPubkeyFixtures
     * @param string $coinName
     * @param array $path
     * @param string $curveName
     */
    public function testGetPublicKey(string $coinName, array $path, string $curveName = null)
    {
        $getPublicKey = $this->factory->getPublicKey($coinName, $path, $curveName);
        $this->assertEquals($coinName, $getPublicKey->getCoinName());
        $this->assertEquals($path, $getPublicKey->getAddressNList()->getArrayCopy());
    }
}
